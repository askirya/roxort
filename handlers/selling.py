from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from database.db import get_session
from database.models import User, PhoneListing
from config import RENTAL_PERIODS

router = Router()

class SellPhoneStates(StatesGroup):
    choosing_duration = State()
    choosing_service = State()
    entering_price = State()

available_services = [
    "Telegram",
    "WhatsApp",
    "Instagram",
    "Facebook",
    "VK",
    "Gmail",
    "Uber",
    "Airbnb"
]

def get_duration_keyboard():
    keyboard = []
    for duration in RENTAL_PERIODS:
        keyboard.append([KeyboardButton(text=f"‚è∞ {duration} —á–∞—Å(–æ–≤)")])
    keyboard.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_services_keyboard():
    keyboard = []
    for i in range(0, len(available_services), 2):
        row = [KeyboardButton(text=available_services[i])]
        if i + 1 < len(available_services):
            row.append(KeyboardButton(text=available_services[i + 1]))
        keyboard.append(row)
    keyboard.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

@router.message(F.text == "üì± –ü—Ä–æ–¥–∞—Ç—å –Ω–æ–º–µ—Ä")
async def start_selling(message: types.Message, state: FSMContext):
    async with await get_session() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞."
            )
            return

    await state.set_state(SellPhoneStates.choosing_duration)
    await message.answer(
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –Ω–æ–º–µ—Ä–∞:",
        reply_markup=get_duration_keyboard()
    )

@router.message(SellPhoneStates.choosing_duration)
async def process_duration(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        from handlers.common import get_main_keyboard
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
        return

    duration = message.text.split()[1]
    try:
        duration = int(duration)
        if duration not in RENTAL_PERIODS:
            raise ValueError
    except:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    await state.update_data(duration=duration)
    await state.set_state(SellPhoneStates.choosing_service)
    
    await message.answer(
        "üì± –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å –Ω–æ–º–µ—Ä:",
        reply_markup=get_services_keyboard()
    )

@router.message(SellPhoneStates.choosing_service)
async def process_service(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        from handlers.common import get_main_keyboard
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
        return

    if message.text not in available_services:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(service=message.text)
    await state.set_state(SellPhoneStates.entering_price)
    
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã –≤ USDT (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.00):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

@router.message(SellPhoneStates.entering_price)
async def process_price(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        from handlers.common import get_main_keyboard
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
        return

    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError
    except:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.00)")
        return

    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with await get_session() as session:
        user = await session.get(User, message.from_user.id)
        new_listing = PhoneListing(
            seller_id=user.id,
            service=data['service'],
            duration=data['duration'],
            price=price,
            is_active=True
        )
        session.add(new_listing)
        await session.commit()

    await state.clear()
    from handlers.common import get_main_keyboard
    
    await message.answer(
        "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
        f"üì± –°–µ—Ä–≤–∏—Å: {data['service']}\n"
        f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']} —á–∞—Å(–æ–≤)\n"
        f"üí∞ –¶–µ–Ω–∞: {price} USDT\n\n"
        "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        reply_markup=get_main_keyboard()
    ) 