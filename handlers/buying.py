from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import get_session
from database.models import User, PhoneListing, Transaction
from datetime import datetime
from sqlalchemy import select, and_

router = Router()

class BuyPhoneStates(StatesGroup):
    choosing_service = State()
    choosing_duration = State()
    viewing_listings = State()
    confirming_purchase = State()

def get_filter_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ —Å–µ—Ä–≤–∏—Å—É"), KeyboardButton(text="‚è∞ –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")],
            [KeyboardButton(text="üí∞ –°–Ω–∞—á–∞–ª–∞ –¥–µ—à–µ–≤—ã–µ"), KeyboardButton(text="üí∞ –°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ")],
            [KeyboardButton(text="üîÑ –°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_listing_keyboard(listing_id: int):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{listing_id}"),
                InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data="next_listing")
            ]
        ]
    )
    return keyboard

@router.message(F.text == "üõí –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä")
async def start_buying(message: types.Message, state: FSMContext):
    async with await get_session() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞."
            )
            return

    await message.answer(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–∞:",
        reply_markup=get_filter_keyboard()
    )

@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ —Å–µ—Ä–≤–∏—Å—É")
async def search_by_service(message: types.Message, state: FSMContext):
    from handlers.selling import get_services_keyboard
    await state.set_state(BuyPhoneStates.choosing_service)
    await message.answer(
        "üì± –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:",
        reply_markup=get_services_keyboard()
    )

@router.message(BuyPhoneStates.choosing_service)
async def process_service_choice(message: types.Message, state: FSMContext):
    from handlers.selling import available_services
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        from handlers.common import get_main_keyboard
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
        return

    if message.text not in available_services:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    async with await get_session() as session:
        query = select(PhoneListing).where(
            and_(
                PhoneListing.service == message.text,
                PhoneListing.is_active == True
            )
        ).order_by(PhoneListing.created_at.desc())
        
        result = await session.execute(query)
        listings = result.scalars().all()

        if not listings:
            await message.answer(
                "üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å."
            )
            return

        await state.update_data(current_listing_index=0, listings=[listing.id for listing in listings])
        await show_listing(message, state, listings[0])

async def show_listing(message: types.Message, state: FSMContext, listing: PhoneListing):
    async with await get_session() as session:
        seller = await session.get(User, listing.seller_id)
        
        await message.answer(
            f"üì± –ù–æ–º–µ—Ä –¥–ª—è {listing.service}\n\n"
            f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {listing.duration} —á–∞—Å(–æ–≤)\n"
            f"üí∞ –¶–µ–Ω–∞: {listing.price} USDT\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller.username or '–ê–Ω–æ–Ω–∏–º'}\n"
            f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞: {seller.rating}\n"
            f"üìÖ –†–∞–∑–º–µ—â–µ–Ω–æ: {listing.created_at.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=get_listing_keyboard(listing.id)
        )

@router.callback_query(lambda c: c.data.startswith('buy_'))
async def process_buy(callback: types.CallbackQuery, state: FSMContext):
    listing_id = int(callback.data.split('_')[1])
    
    async with await get_session() as session:
        listing = await session.get(PhoneListing, listing_id)
        buyer = await session.get(User, callback.from_user.id)
        
        if not listing or not listing.is_active:
            await callback.message.answer("‚ùå –≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
            return
        
        if buyer.balance < listing.price:
            await callback.message.answer(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n"
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {listing.price} USDT\n"
                f"–ù–∞ –±–∞–ª–∞–Ω—Å–µ: {buyer.balance} USDT\n\n"
                "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = Transaction(
            buyer_id=buyer.id,
            seller_id=listing.seller_id,
            listing_id=listing_id,
            amount=listing.price,
            status="pending"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        listing.is_active = False
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        buyer.balance -= listing.price
        
        session.add(transaction)
        await session.commit()
        
        await callback.message.answer(
            "‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üì± –°–µ—Ä–≤–∏—Å: {listing.service}\n"
            f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {listing.duration} —á–∞—Å(–æ–≤)\n"
            f"üí∞ –°—É–º–º–∞: {listing.price} USDT\n\n"
            "‚ö†Ô∏è –ï—Å–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –¥–æ—Å—Ç—É–ø –∏–ª–∏ –±—É–¥–µ—Ç –º–µ—à–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–æ–º–µ—Ä–∞, "
            "–≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ."
        )

@router.callback_query(lambda c: c.data == 'next_listing')
async def show_next_listing(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data.get('current_listing_index', 0)
    listings = data.get('listings', [])
    
    if current_index + 1 >= len(listings):
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ.")
        return
    
    current_index += 1
    await state.update_data(current_listing_index=current_index)
    
    async with await get_session() as session:
        listing = await session.get(PhoneListing, listings[current_index])
        if listing:
            await show_listing(callback.message, state, listing)

@router.message(F.text == "üí∞ –°–Ω–∞—á–∞–ª–∞ –¥–µ—à–µ–≤—ã–µ")
async def sort_by_price_asc(message: types.Message, state: FSMContext):
    async with await get_session() as session:
        query = select(PhoneListing).where(
            PhoneListing.is_active == True
        ).order_by(PhoneListing.price.asc())
        
        await process_sorted_listings(message, state, session, query)

@router.message(F.text == "üí∞ –°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ")
async def sort_by_price_desc(message: types.Message, state: FSMContext):
    async with await get_session() as session:
        query = select(PhoneListing).where(
            PhoneListing.is_active == True
        ).order_by(PhoneListing.price.desc())
        
        await process_sorted_listings(message, state, session, query)

@router.message(F.text == "üîÑ –°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ")
async def sort_by_date(message: types.Message, state: FSMContext):
    async with await get_session() as session:
        query = select(PhoneListing).where(
            PhoneListing.is_active == True
        ).order_by(PhoneListing.created_at.desc())
        
        await process_sorted_listings(message, state, session, query)

async def process_sorted_listings(message: types.Message, state: FSMContext, session, query):
    result = await session.execute(query)
    listings = result.scalars().all()
    
    if not listings:
        await message.answer("üòï –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
        return
    
    await state.update_data(current_listing_index=0, listings=[listing.id for listing in listings])
    await show_listing(message, state, listings[0]) 