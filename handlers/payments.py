from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import get_session
from database.models import User, Transaction
from datetime import datetime
import aiohttp
from config import CRYPTO_BOT_TOKEN, MIN_WITHDRAWAL

router = Router()

class PaymentStates(StatesGroup):
    entering_deposit_amount = State()
    entering_withdrawal_amount = State()

def get_payment_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å"), KeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

async def create_invoice(amount: float) -> dict:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å –≤ CryptoBot"""
    url = f"https://pay.crypt.bot/api/createInvoice"
    headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN}
    params = {
        "asset": "USDT",
        "amount": str(amount),
        "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ ROXORT SMS",
        "paid_btn_name": "back",
        "paid_btn_url": "https://t.me/roxort_bot"
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=params) as response:
            return await response.json()

async def create_transfer(user_id: int, amount: float) -> dict:
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –≤ CryptoBot"""
    url = f"https://pay.crypt.bot/api/transfer"
    headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN}
    params = {
        "user_id": user_id,
        "asset": "USDT",
        "amount": str(amount),
        "spend_id": f"withdrawal_{datetime.utcnow().timestamp()}"
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=params) as response:
            return await response.json()

@router.message(lambda message: message.text in ["üí∞ –ë–∞–ª–∞–Ω—Å", "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "üí∏ –í—ã–≤–µ—Å—Ç–∏"])
async def show_payment_menu(message: types.Message):
    if message.text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        async with await get_session() as session:
            user = await session.get(User, message.from_user.id)
            if not user:
                await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
                return
            
            await message.answer(
                f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} USDT\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_payment_keyboard()
            )
    else:
        await process_payment_action(message)

async def process_payment_action(message: types.Message):
    if message.text == "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ USDT (–º–∏–Ω–∏–º—É–º 1 USDT):",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True
            )
        )
        await PaymentStates.entering_deposit_amount.set()
    
    elif message.text == "üí∏ –í—ã–≤–µ—Å—Ç–∏":
        async with await get_session() as session:
            user = await session.get(User, message.from_user.id)
            if user.balance < MIN_WITHDRAWAL:
                await message.answer(
                    f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} USDT\n"
                    f"–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: {user.balance} USDT"
                )
                return
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ –≤ USDT (–º–∏–Ω–∏–º—É–º {MIN_WITHDRAWAL} USDT):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
                    resize_keyboard=True
                )
            )
            await PaymentStates.entering_withdrawal_amount.set()

@router.message(PaymentStates.entering_deposit_amount)
async def process_deposit_amount(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        from handlers.common import get_main_keyboard
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
        return
    
    try:
        amount = float(message.text)
        if amount < 1:
            raise ValueError
    except:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–º–∏–Ω–∏–º—É–º 1 USDT)")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ CryptoBot
    invoice = await create_invoice(amount)
    
    if invoice.get("ok"):
        pay_url = invoice["result"]["pay_url"]
        await message.answer(
            f"üí≥ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω\n\n"
            f"–°—É–º–º–∞: {amount} USDT\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)]
                ]
            )
        )
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()
    from handlers.common import get_main_keyboard
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

@router.message(PaymentStates.entering_withdrawal_amount)
async def process_withdrawal_amount(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        from handlers.common import get_main_keyboard
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
        return
    
    try:
        amount = float(message.text)
        if amount < MIN_WITHDRAWAL:
            raise ValueError
    except:
        await message.answer(f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–º–∏–Ω–∏–º—É–º {MIN_WITHDRAWAL} USDT)")
        return
    
    async with await get_session() as session:
        user = await session.get(User, message.from_user.id)
        if amount > user.balance:
            await message.answer(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n"
                f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ: {amount} USDT\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {user.balance} USDT"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ CryptoBot
        transfer = await create_transfer(user.telegram_id, amount)
        
        if transfer.get("ok"):
            # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.balance -= amount
            await session.commit()
            
            await message.answer(
                "‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã!\n\n"
                f"–°—É–º–º–∞: {amount} USDT\n"
                f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance} USDT"
            )
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()
    from handlers.common import get_main_keyboard
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç CryptoBot
@router.message(lambda message: message.get_command() == "/cryptobot_payment")
async def handle_payment_notification(message: types.Message):
    try:
        data = message.get_args().split("_")
        user_id = int(data[0])
        amount = float(data[1])
        
        async with await get_session() as session:
            user = await session.get(User, user_id)
            if user:
                user.balance += amount
                await session.commit()
                
                await message.bot.send_message(
                    user_id,
                    f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} USDT\n"
                    f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} USDT"
                )
    except:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        pass 