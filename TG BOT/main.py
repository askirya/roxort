import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN
from database.db import init_db
from handlers import registration, common, selling, buying, disputes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
dp.include_router(registration.router)
dp.include_router(common.router)
dp.include_router(selling.router)
dp.include_router(buying.router)
dp.include_router(disputes.router)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
            [KeyboardButton(text="üì± –ü—Ä–æ–¥–∞—Ç—å –Ω–æ–º–µ—Ä"), KeyboardButton(text="üõí –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä")],
            [KeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_registered = await common.check_user_registered(message.from_user.id)
    
    if user_registered:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ROXORT SMS!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ "
            "–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=common.get_main_keyboard()
        )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ROXORT SMS!\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=common.get_start_keyboard()
        )

@dp.message(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ
    await message.answer(
        "üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        "ID: {}\n"
        "–†–µ–π—Ç–∏–Ω–≥: ‚≠êÔ∏è 5.0\n"
        "–ü—Ä–æ–¥–∞–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: 0\n"
        "–ö—É–ø–ª–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: 0\n"
        "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {}"
        .format(message.from_user.id, message.date.strftime("%d.%m.%Y"))
    )

@dp.message(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    await message.answer("üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: 0 USDT")

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 