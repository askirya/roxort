from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import get_session
from database.models import User, Transaction, Dispute
from datetime import datetime
from sqlalchemy import select, and_
from config import ADMIN_IDS

router = Router()

class DisputeStates(StatesGroup):
    entering_description = State()
    admin_reviewing = State()
    waiting_for_response = State()

def get_dispute_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä")],
            [KeyboardButton(text="üìã –ú–æ–∏ —Å–ø–æ—Ä—ã")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_admin_dispute_keyboard(dispute_id: int):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –í–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é", 
                                   callback_data=f"resolve_buyer_{dispute_id}"),
                InlineKeyboardButton(text="üí∞ –ü–µ—Ä–µ–¥–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü—É", 
                                   callback_data=f"resolve_seller_{dispute_id}")
            ],
            [
                InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", 
                                   callback_data=f"close_dispute_{dispute_id}")
            ]
        ]
    )
    return keyboard

@router.message(F.text == "‚ö†Ô∏è –°–ø–æ—Ä—ã")
async def show_dispute_menu(message: types.Message):
    async with await get_session() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return
        
        await message.answer(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_dispute_keyboard()
        )

@router.message(F.text == "üìù –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä")
async def start_dispute(message: types.Message, state: FSMContext):
    async with await get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = select(Transaction).where(
            and_(
                Transaction.buyer_id == message.from_user.id,
                Transaction.status == "pending"
            )
        )
        result = await session.execute(query)
        transactions = result.scalars().all()
        
        if not transactions:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        keyboard = []
        for tx in transactions:
            listing = await session.get(PhoneListing, tx.listing_id)
            keyboard.append([
                KeyboardButton(text=f"üì± {listing.service} - {tx.amount} USDT (ID: {tx.id})")
            ])
        keyboard.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
        
        await state.set_state(DisputeStates.entering_description)
        await message.answer(
            "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä:",
            reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        )

@router.message(DisputeStates.entering_description)
async def process_dispute_description(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        from handlers.common import get_main_keyboard
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
        return
    
    try:
        tx_id = int(message.text.split("ID: ")[1].strip(")"))
    except:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    async with await get_session() as session:
        transaction = await session.get(Transaction, tx_id)
        if not transaction:
            await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–æ—Ä
        dispute = Dispute(
            transaction_id=tx_id,
            initiator_id=message.from_user.id,
            description=message.text,
            status="open"
        )
        session.add(dispute)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction.status = "disputed"
        
        await session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                await message.bot.send_message(
                    admin_id,
                    f"‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π —Å–ø–æ—Ä!\n\n"
                    f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_id}\n"
                    f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {message.from_user.username or message.from_user.id}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {message.text}",
                    reply_markup=get_admin_dispute_keyboard(dispute.id)
                )
            except:
                continue
        
        await state.clear()
        from handlers.common import get_main_keyboard
        
        await message.answer(
            "‚úÖ –°–ø–æ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_main_keyboard()
        )

@router.message(F.text == "üìã –ú–æ–∏ —Å–ø–æ—Ä—ã")
async def show_my_disputes(message: types.Message):
    async with await get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ø–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = select(Dispute).where(
            Dispute.initiator_id == message.from_user.id
        ).order_by(Dispute.created_at.desc())
        
        result = await session.execute(query)
        disputes = result.scalars().all()
        
        if not disputes:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–ø–æ—Ä–æ–≤.")
            return
        
        for dispute in disputes:
            transaction = await session.get(Transaction, dispute.transaction_id)
            listing = await session.get(PhoneListing, transaction.listing_id)
            
            status_emoji = {
                "open": "üî¥",
                "resolved": "‚úÖ",
                "closed": "‚ö´Ô∏è"
            }
            
            await message.answer(
                f"{status_emoji.get(dispute.status, '‚ùì')} –°–ø–æ—Ä #{dispute.id}\n\n"
                f"üì± –°–µ—Ä–≤–∏—Å: {listing.service}\n"
                f"üí∞ –°—É–º–º–∞: {transaction.amount} USDT\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω: {dispute.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìù –°—Ç–∞—Ç—É—Å: {dispute.status}\n"
                f"‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {dispute.description}"
            )

@router.callback_query(lambda c: c.data.startswith('resolve_'))
async def resolve_dispute(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    action, dispute_id = callback.data.split('_')[1:]
    dispute_id = int(dispute_id)
    
    async with await get_session() as session:
        dispute = await session.get(Dispute, dispute_id)
        if not dispute or dispute.status != "open":
            await callback.answer("‚ùå –°–ø–æ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        transaction = await session.get(Transaction, dispute.transaction_id)
        buyer = await session.get(User, transaction.buyer_id)
        seller = await session.get(User, transaction.seller_id)
        
        if action == "buyer":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
            buyer.balance += transaction.amount
            transaction.status = "refunded"
            dispute.status = "resolved"
            
            await callback.message.edit_text(
                f"‚úÖ –°–ø–æ—Ä #{dispute_id} —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n"
                f"üí∞ –°—É–º–º–∞ {transaction.amount} USDT –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é."
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            await callback.bot.send_message(
                buyer.telegram_id,
                f"‚úÖ –í–∞—à —Å–ø–æ—Ä #{dispute_id} —Ä–∞–∑—Ä–µ—à–µ–Ω!\n"
                f"üí∞ –°—É–º–º–∞ {transaction.amount} USDT –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."
            )
            
        elif action == "seller":
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü—É
            seller.balance += transaction.amount
            transaction.status = "completed"
            dispute.status = "resolved"
            
            await callback.message.edit_text(
                f"‚úÖ –°–ø–æ—Ä #{dispute_id} —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞\n"
                f"üí∞ –°—É–º–º–∞ {transaction.amount} USDT –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü—É."
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
            await callback.bot.send_message(
                seller.telegram_id,
                f"‚úÖ –°–ø–æ—Ä –ø–æ —Å–¥–µ–ª–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É!\n"
                f"üí∞ –°—É–º–º–∞ {transaction.amount} USDT –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."
            )
        
        await session.commit()

@router.callback_query(lambda c: c.data.startswith('close_dispute_'))
async def close_dispute(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    dispute_id = int(callback.data.split('_')[2])
    
    async with await get_session() as session:
        dispute = await session.get(Dispute, dispute_id)
        if not dispute or dispute.status != "open":
            await callback.answer("‚ùå –°–ø–æ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        dispute.status = "closed"
        await session.commit()
        
        await callback.message.edit_text(
            f"‚ö´Ô∏è –°–ø–æ—Ä #{dispute_id} –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        ) 