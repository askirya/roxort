from aiogram import Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from database.db import get_session
from database.models import User, Transaction, Review
from sqlalchemy import select, or_
from config import ADMIN_IDS

router = Router()

def get_main_keyboard(user_id: int = None):
    base_buttons = [
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
        [KeyboardButton(text="üì± –ü—Ä–æ–¥–∞—Ç—å –Ω–æ–º–µ—Ä"), KeyboardButton(text="üõí –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä")],
        [KeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞"), KeyboardButton(text="‚ö†Ô∏è –°–ø–æ—Ä—ã")],
        [KeyboardButton(text="‚≠êÔ∏è –û—Ç–∑—ã–≤—ã")]
    ]
    
    if user_id in ADMIN_IDS:
        base_buttons.append([KeyboardButton(text="üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")])
    
    return ReplyKeyboardMarkup(keyboard=base_buttons, resize_keyboard=True)

def get_start_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]],
        resize_keyboard=True
    )
    return keyboard

async def check_user_registered(user_id: int) -> bool:
    async with await get_session() as session:
        user = await session.get(User, user_id)
        return user is not None

@router.message(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    async with await get_session() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
                reply_markup=get_start_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tx_query = select(Transaction).where(
            or_(
                Transaction.buyer_id == user.id,
                Transaction.seller_id == user.id
            )
        )
        tx_result = await session.execute(tx_query)
        transactions = tx_result.scalars().all()
        
        sold_count = len([tx for tx in transactions if tx.seller_id == user.id and tx.status == "completed"])
        bought_count = len([tx for tx in transactions if tx.buyer_id == user.id and tx.status == "completed"])
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
        reviews_query = select(Review).where(Review.reviewed_id == user.id)
        reviews_result = await session.execute(reviews_query)
        reviews_count = len(reviews_result.scalars().all())
        
        await message.answer(
            f"üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"ID: {user.telegram_id}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n"
            f"–†–µ–π—Ç–∏–Ω–≥: {'‚≠êÔ∏è' * round(user.rating)} ({user.rating:.1f})\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {reviews_count}\n"
            f"–ë–∞–ª–∞–Ω—Å: {user.balance} USDT\n"
            f"–ü—Ä–æ–¥–∞–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: {sold_count}\n"
            f"–ö—É–ø–ª–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: {bought_count}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registered_at.strftime('%d.%m.%Y')}",
            reply_markup=get_main_keyboard(message.from_user.id)
        )

@router.message(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    async with await get_session() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
                reply_markup=get_start_keyboard()
            )
            return
        
        await message.answer(
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} USDT",
            reply_markup=get_main_keyboard(message.from_user.id)
        ) 