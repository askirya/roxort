from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import get_session
from database.models import User, Transaction, Dispute, PhoneListing, Review
from datetime import datetime, timedelta
from sqlalchemy import select, and_, or_, func
from config import ADMIN_IDS

router = Router()

class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    entering_balance = State()
    entering_announcement = State()

def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
            [KeyboardButton(text="üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏"), KeyboardButton(text="‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã")],
            [KeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"), KeyboardButton(text="üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
            [KeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

async def check_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

@router.message(lambda message: message.text == "üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def show_admin_panel(message: types.Message):
    if not await check_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

@router.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: types.Message):
    if not await check_admin(message.from_user.id):
        return
    
    async with await get_session() as session:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        users_count = await session.scalar(select(func.count(User.id)))
        active_listings = await session.scalar(
            select(func.count(PhoneListing.id)).where(PhoneListing.is_active == True)
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        day_ago = datetime.utcnow() - timedelta(days=1)
        new_users = await session.scalar(
            select(func.count(User.id)).where(User.registered_at >= day_ago)
        )
        new_transactions = await session.scalar(
            select(func.count(Transaction.id)).where(Transaction.created_at >= day_ago)
        )
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_volume = await session.scalar(
            select(func.sum(Transaction.amount)).where(Transaction.status == "completed")
        )
        platform_earnings = total_volume * (5 / 100) if total_volume else 0
        
        await message.answer(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {active_listings}\n"
            f"üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 24—á: {new_users}\n"
            f"üí∞ –ù–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞ 24—á: {new_transactions}\n"
            f"üíµ –û–±—â–∏–π –æ–±—ä–µ–º —Å–¥–µ–ª–æ–∫: {total_volume:.2f} USDT\n"
            f"üìà –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platform_earnings:.2f} USDT"
        )

@router.message(lambda message: message.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def show_users(message: types.Message):
    if not await check_admin(message.from_user.id):
        return
    
    async with await get_session() as session:
        query = select(User).order_by(User.registered_at.desc()).limit(10)
        result = await session.execute(query)
        users = result.scalars().all()
        
        response = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            response += (
                f"ID: {user.telegram_id}\n"
                f"Username: @{user.username or '–ù–µ—Ç'}\n"
                f"–ë–∞–ª–∞–Ω—Å: {user.balance} USDT\n"
                f"–†–µ–π—Ç–∏–Ω–≥: ‚≠êÔ∏è {user.rating}\n"
                f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.registered_at.strftime('%d.%m.%Y %H:%M')}\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            )
        
        await message.answer(response)

@router.message(lambda message: message.text == "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏")
async def manage_balance_start(message: types.Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        return
    
    await state.set_state(AdminStates.waiting_for_user_id)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

@router.message(AdminStates.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_admin_keyboard()
        )
        return
    
    try:
        user_id = int(message.text)
        async with await get_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            await state.update_data(user_id=user_id)
            await state.set_state(AdminStates.entering_balance)
            
            await message.answer(
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.balance} USDT\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:"
            )
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

@router.message(AdminStates.entering_balance)
async def process_new_balance(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_admin_keyboard()
        )
        return
    
    try:
        new_balance = float(message.text)
        data = await state.get_data()
        user_id = data['user_id']
        
        async with await get_session() as session:
            user = await session.get(User, user_id)
            old_balance = user.balance
            user.balance = new_balance
            await session.commit()
            
            await message.answer(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                f"–°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: {old_balance} USDT\n"
                f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} USDT",
                reply_markup=get_admin_keyboard()
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.bot.send_message(
                user.telegram_id,
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} USDT"
            )
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
    
    await state.clear()

@router.message(lambda message: message.text == "‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã")
async def show_active_disputes(message: types.Message):
    if not await check_admin(message.from_user.id):
        return
    
    async with await get_session() as session:
        query = select(Dispute).where(Dispute.status == "open")
        result = await session.execute(query)
        disputes = result.scalars().all()
        
        if not disputes:
            await message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤ –Ω–µ—Ç!")
            return
        
        for dispute in disputes:
            transaction = await session.get(Transaction, dispute.transaction_id)
            buyer = await session.get(User, transaction.buyer_id)
            seller = await session.get(User, transaction.seller_id)
            
            await message.answer(
                f"‚ö†Ô∏è –°–ø–æ—Ä #{dispute.id}\n\n"
                f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{buyer.username or buyer.telegram_id}\n"
                f"–ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller.username or seller.telegram_id}\n"
                f"–°—É–º–º–∞: {transaction.amount} USDT\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {dispute.description}\n"
                f"–°–æ–∑–¥–∞–Ω: {dispute.created_at.strftime('%d.%m.%Y %H:%M')}",
                reply_markup=get_admin_dispute_keyboard(dispute.id)
            )

@router.message(lambda message: message.text == "üì¢ –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def start_announcement(message: types.Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        return
    
    await state.set_state(AdminStates.entering_announcement)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

@router.message(AdminStates.entering_announcement)
async def process_announcement(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_admin_keyboard()
        )
        return
    
    async with await get_session() as session:
        query = select(User)
        result = await session.execute(query)
        users = result.scalars().all()
        
        sent_count = 0
        for user in users:
            try:
                await message.bot.send_message(
                    user.telegram_id,
                    f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message.text}"
                )
                sent_count += 1
            except:
                continue
        
        await message.answer(
            f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!",
            reply_markup=get_admin_keyboard()
        )
    
    await state.clear()

@router.message(lambda message: message.text == "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def block_user_start(message: types.Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        return
    
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await message.answer(
        "üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        reply_markup=get_admin_keyboard()
    )

@router.message(lambda message: message.text == "‚ùå –í—ã–π—Ç–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞")
async def exit_admin_panel(message: types.Message):
    if not await check_admin(message.from_user.id):
        return
    
    from handlers.common import get_main_keyboard
    await message.answer(
        "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=get_main_keyboard()
    ) 