from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import get_session
from database.models import User, Transaction, Review
from datetime import datetime, timedelta
from sqlalchemy import select, and_, or_

router = Router()

class ReviewStates(StatesGroup):
    choosing_transaction = State()
    entering_rating = State()
    entering_comment = State()

def get_rating_keyboard():
    keyboard = []
    for i in range(1, 6):
        stars = "‚≠êÔ∏è" * i
        keyboard.append([KeyboardButton(text=f"{stars}")])
    keyboard.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

@router.message(F.text == "‚≠êÔ∏è –û—Ç–∑—ã–≤—ã")
async def show_rating_menu(message: types.Message, state: FSMContext):
    async with await get_session() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_ago = datetime.utcnow() - timedelta(days=7)
        query = select(Transaction).where(
            and_(
                or_(
                    Transaction.buyer_id == user.id,
                    Transaction.seller_id == user.id
                ),
                Transaction.status == "completed",
                Transaction.completed_at >= week_ago
            )
        )
        result = await session.execute(query)
        transactions = result.scalars().all()

        if not transactions:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π, "
                "–ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤."
            )
            return

        keyboard = []
        for tx in transactions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤
            review_exists = await session.execute(
                select(Review).where(
                    and_(
                        Review.transaction_id == tx.id,
                        Review.reviewer_id == user.id
                    )
                )
            )
            if not await review_exists.first():
                if tx.buyer_id == user.id:
                    role = "–ø—Ä–æ–¥–∞–≤—Ü—É"
                    other_user = await session.get(User, tx.seller_id)
                else:
                    role = "–ø–æ–∫—É–ø–∞—Ç–µ–ª—é"
                    other_user = await session.get(User, tx.buyer_id)
                
                keyboard.append([
                    KeyboardButton(
                        text=f"üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ {role} {other_user.username or '–ê–Ω–æ–Ω–∏–º'} "
                        f"(ID: {tx.id})"
                    )
                ])

        if not keyboard:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–¥–µ–ª–æ–∫, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.")
            return

        keyboard.append([KeyboardButton(text="üë§ –ú–æ–∏ –æ—Ç–∑—ã–≤—ã")])
        keyboard.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])

        await state.set_state(ReviewStates.choosing_transaction)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤:",
            reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        )

@router.message(ReviewStates.choosing_transaction)
async def process_transaction_choice(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        from handlers.common import get_main_keyboard
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
        return

    if message.text == "üë§ –ú–æ–∏ –æ—Ç–∑—ã–≤—ã":
        await show_my_reviews(message)
        await state.clear()
        return

    try:
        tx_id = int(message.text.split("ID: ")[1].strip(")"))
    except:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(transaction_id=tx_id)
    await state.set_state(ReviewStates.entering_rating)
    await message.answer(
        "–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:",
        reply_markup=get_rating_keyboard()
    )

@router.message(ReviewStates.entering_rating)
async def process_rating(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        from handlers.common import get_main_keyboard
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
        return

    rating = len(message.text.strip())  # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
    if rating < 1 or rating > 5:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥.")
        return

    await state.update_data(rating=rating)
    await state.set_state(ReviewStates.entering_comment)
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∑—ã–≤—É:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

@router.message(ReviewStates.entering_comment)
async def process_comment(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        from handlers.common import get_main_keyboard
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
        return

    data = await state.get_data()
    tx_id = data['transaction_id']
    rating = data['rating']

    async with await get_session() as session:
        transaction = await session.get(Transaction, tx_id)
        if not transaction:
            await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –∫–æ–º—É –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤
        if transaction.buyer_id == message.from_user.id:
            reviewer_id = transaction.buyer_id
            reviewed_id = transaction.seller_id
        else:
            reviewer_id = transaction.seller_id
            reviewed_id = transaction.buyer_id

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
        review = Review(
            transaction_id=tx_id,
            reviewer_id=reviewer_id,
            reviewed_id=reviewed_id,
            rating=rating,
            comment=message.text,
            created_at=datetime.utcnow()
        )
        session.add(review)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reviewed_user = await session.get(User, reviewed_id)
        reviews_query = select(Review).where(Review.reviewed_id == reviewed_id)
        reviews_result = await session.execute(reviews_query)
        reviews = reviews_result.scalars().all()

        total_rating = sum(r.rating for r in reviews) + rating
        new_rating = total_rating / (len(reviews) + 1)
        reviewed_user.rating = round(new_rating, 1)

        await session.commit()

        await message.answer(
            "‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω!\n"
            f"–û—Ü–µ–Ω–∫–∞: {'‚≠êÔ∏è' * rating}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}",
            reply_markup=get_main_keyboard()
        )

    await state.clear()

@router.message(F.text == "üë§ –ú–æ–∏ –æ—Ç–∑—ã–≤—ã")
async def show_my_reviews(message: types.Message):
    async with await get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        reviews_query = select(Review).where(Review.reviewed_id == message.from_user.id)
        reviews_result = await session.execute(reviews_query)
        reviews = reviews_result.scalars().all()

        if not reviews:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
            return

        for review in reviews:
            reviewer = await session.get(User, review.reviewer_id)
            transaction = await session.get(Transaction, review.transaction_id)
            
            await message.answer(
                f"‚≠êÔ∏è –û—Ç–∑—ã–≤ –æ—Ç {reviewer.username or '–ê–Ω–æ–Ω–∏–º'}\n\n"
                f"–û—Ü–µ–Ω–∫–∞: {'‚≠êÔ∏è' * review.rating}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {review.comment}\n"
                f"–î–∞—Ç–∞: {review.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {transaction.amount} USDT"
            ) 